{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","navbarHeight","CardArray","robots","map","robot","key","username","style","marginTop","SearchBox","type","placeholder","onChange","this","props","searchChange","Component","App","onSearchChange","event","setState","searchfield","target","value","computeOuterHeight","el","el_style","getComputedStyle","offsetHeight","parseInt","marginBottom","state","window","innerHeight","navRef","React","createRef","current","fetch","then","response","json","users","cardSpace","filteredRobots","filter","toLowerCase","includes","length","ref","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACjB,OACE,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BL,EAA1B,cACxB,6BACI,4BAAKC,GACL,2BAAIC,MCOPI,MAZf,YAA2C,IAAxBC,EAAuB,EAAvBA,aACTC,EADgC,EAATC,OACJC,KAAI,SAACC,GAC1B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMX,GAAIA,GAAIW,EAAMX,GAAIC,KAAMU,EAAMV,KAAMY,SAAUF,EAAME,SAAUX,MAAOS,EAAMT,WAGvG,OACI,yBAAKY,MAAO,CAACC,UAAWR,IACnBC,ICQEQ,E,uKAbP,OACI,yBAAKb,UAAU,OACX,2BACIA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUC,KAAKC,MAAMC,oB,GATjBC,aC2DTC,G,wDAvDX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SApB/B,EAuBdC,mBAAqB,SAACC,GAClB,IAAMC,EAAWC,iBAAiBF,GAIlC,OAHiBA,EAAGG,cACFC,SAASH,EAASlB,WAAaqB,SAASH,EAASI,gBAxBnE,EAAKC,MAAQ,CACT7B,OAAQ,GACRmB,YAAa,GACbrB,aAAcgC,OAAOC,YAAc,GAEvC,EAAKC,OAASC,IAAMC,YAPV,E,gEAUO,IAAD,OACZpC,EAAea,KAAKW,mBAAmBX,KAAKqB,OAAOG,SACvDxB,KAAKO,SAAS,CAACpB,aAAcA,IAE7BsC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKtB,SAAS,CAAClB,OAAQwC,S,+BAepC,IACFC,EADC,OAECC,EAAiB/B,KAAKkB,MAAM7B,OAAO2C,QAAO,SAACzC,GAC7C,OAAOA,EAAMV,KAAKoD,cAAcC,SAAS,EAAKhB,MAAMV,YAAYyB,kBASpE,OALIH,EAD6B,IAA7B9B,KAAKkB,MAAM7B,OAAO8C,OACN,wBAAIzC,MAAO,CAACC,UAAWK,KAAKkB,MAAM/B,eAAlC,WAEA,kBAAC,EAAD,CAAUA,aAAca,KAAKkB,MAAM/B,aAAcE,OAAQ0C,IAIrE,yBAAKhD,UAAU,MACX,yBAAKqD,IAAKpC,KAAKqB,OAAQtC,UAAU,UAC7B,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWmB,aAAcF,KAAKK,kBAEjCyB,O,GAlDC3B,cCOEkC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3dee3c15.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card({id, name, email}) {\r\n        return (\r\n          <div className=\"tc bg-light-green dib ma2 pa3 br3 grow bw2 shadow-5\">\r\n              <img alt=\"RoboPhoto\" src={`https://robohash.org/${id}?200x200`}/>\r\n              <div>\r\n                  <h2>{name}</h2>\r\n                  <p>{email}</p>\r\n              </div>\r\n          </div>\r\n        );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nfunction CardList({navbarHeight, robots}) {\r\n    const CardArray = robots.map((robot) => {\r\n        return <Card key={robot.id} id={robot.id} name={robot.name} username={robot.username} email={robot.email}/>\r\n    })\r\n\r\n    return (\r\n        <div style={{marginTop: navbarHeight}}>\r\n            {CardArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React, {Component} from \"react\";\r\n\r\nclass SearchBox extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pa2\">\r\n                <input\r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type='search'\r\n                    placeholder='Search Robots'\r\n                    onChange={this.props.searchChange}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\"\r\nimport \"./App.css\"\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n            navbarHeight: window.innerHeight / 2\r\n        }\r\n        this.navRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        let navbarHeight = this.computeOuterHeight(this.navRef.current);\r\n        this.setState({navbarHeight: navbarHeight})\r\n\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    computeOuterHeight = (el) => {\r\n        const el_style = getComputedStyle(el);\r\n        const elHeight = el.offsetHeight;\r\n        const elMargins = parseInt(el_style.marginTop) + parseInt(el_style.marginBottom);\r\n\r\n        return elHeight + elMargins;\r\n    }\r\n\r\n    render() {\r\n        let cardSpace;\r\n        const filteredRobots = this.state.robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n\r\n        if (this.state.robots.length === 0) {\r\n            cardSpace = <h1 style={{marginTop: this.state.navbarHeight}}>LOADING</h1>\r\n        } else {\r\n            cardSpace = <CardList navbarHeight={this.state.navbarHeight} robots={filteredRobots}/>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"tc\">\r\n                <div ref={this.navRef} className=\"navBar\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                </div>\r\n                {cardSpace}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}